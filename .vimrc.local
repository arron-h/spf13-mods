"
" Arron's .vimrc.local file.
"
" This file is loaded by .vimrc at the end of the file.
" 
" ------- Key mappings
nmap ]d :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap ]r :YcmForceCompileAndDiagnostics<CR>
noremap j <up>
noremap k <down>

" ------- Font and GUI configuration
" Use a better font. Font names are different on OSX and Linux.
if has("gui_macvim")
    set guifont=Source\ Code\ Pro\ for\ Powerline:h12
else
    set guifont=Source\ Code\ Pro\ for\ Powerline\ 10
endif

" ------- Plugin removal. This has to be done in this here due to ordering.
" Remove gitgutter as we're using signify instead.
UnBundle 'airblade/vim-gitgutter'

" ------- Code completion configuration
" Disable AutoComplPop at startup
let g:acp_enableAtStartup = 0

" Have syntastic check the syntax on opening a file
let g:syntastic_check_on_open = 1

" Enable completion from tags
let g:ycm_collect_identifiers_from_tags_files = 1

" Remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger       = '<C-j>'
let g:UltiSnipsJumpForwardTrigger  = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

if has('conceal')
	set conceallevel=2 concealcursor=i
endif

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview

function! YcmConfigCompleter(ArgLead, CmdLine, CursorPos)
    return ['c', 'cpp']
endfunction

function! YcmConfig(...)
    let s:c_flags=['\"-x\"', '\"c\"']
    let s:cpp_flags=['\"-x\"', '\"c++\"']
    let s:base_flags=['\"-Wall\"']
    if a:0 == 1
        if a:1 == 'c'
            let s:comp_flags = extend(s:base_flags, s:c_flags)
        elseif a:1 == 'cpp'
            let s:comp_flags = extend(s:base_flags, s:cpp_flags)
        endif
    endif

    let s:python_flags=join(s:comp_flags, ',\n')
    let s:python_func='def FlagsForFile(filename,**kwargs):\n\treturn { \"flags\": flags, \"do_cache\": True }'
    exe ':silent ! echo "import ycm_core\n\nflags = [\n'.s:python_flags.',\n]\n\n'.s:python_func.'\n" > .ycm_extra_conf.py'
    execute 'split .ycm_extra_conf.py'
endfunction
command! -nargs=? -complete=customlist,YcmConfigCompleter YcmConfig :call YcmConfig(<f-args>)

