"
" Arron's .vimrc.local file.
"
" This file is loaded by .vimrc at the end of the file.
"
"               ____________
"______________/ Unbundling \___________________________________"
UnBundle 'spf13/vim-colors'

"               ____________
"______________/ Formatting \___________________________________"
set noexpandtab

"               ______________
"______________/ Key Mappings \_________________________________"
map <F2>   :FSHere<CR>
map <S-F2> :FSSplitRight<CR>
map <F3>   :YcmDiags<CR>
map <S-F3> :YcmForceCompileAndDiagnostics<CR>
map <F4>   :YcmCompleter GoToDefinitionElseDeclaration<CR>

"               ________
"______________/ Layout \_______________________________________"
" Set the column indicator
let &colorcolumn="80,".join(range(120,500),",")

"               ___________________
"______________/ Fonts and Colours \____________________________"
" Set the theme and tweak it a little
let g:molokai_original = 0
let g:rehash256        = 1
colorscheme molokai

let g:airline_theme='badwolf'

" Use a better font. Font names are different on OSX and Linux and Win32
if has("gui_macvim")
	set guifont=Source\ Code\ Pro\ for\ Powerline:h12
elseif has("gui_win32")
	set guifont=Sauce_Code_Powerline:h11
elseif has("gui_gtk")
	set guifont=Source\ Code\ Pro\ for\ Powerline\ 10
endif

" Disable some colours for Win32 command line
if has("win32")
	if !has("gui_running")
		set colorcolumn=0
		set nocursorline
	endif
endif


"               ___________
"______________/ Operation \____________________________________"
" Have syntastic check the syntax on opening a file
let g:syntastic_check_on_open = 1

" Allow Tagbar to autofocus when opened and to close when a tag is selected.
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" Use a global .ycm_extra_conf file, to suppress annoying warnings when
" opening cpp files.
let g:ycm_global_ycm_extra_conf = "~/.ycm_global_extra_conf.py"

"               _______________ _______________
"______________/ Functionality / YCM Additions \________________"
" Generate a blank YCM config file
if count(g:spf13_bundle_groups, 'youcompleteme')
	function! YcmConfigCompleter(ArgLead, CmdLine, CursorPos)
		return ['c', 'cpp']
	endfunction

	function! YcmConfig(...)
		let s:c_flags=['\"-x\"', '\"c\"']
		let s:cpp_flags=['\"-x\"', '\"c++\"']
		let s:base_flags=['\"-Wall\"']
		if a:0 == 1
			if a:1 == 'c'
				let s:comp_flags = extend(s:base_flags, s:c_flags)
			elseif a:1 == 'cpp'
				let s:comp_flags = extend(s:base_flags, s:cpp_flags)
			endif
		endif

		let s:python_flags=join(s:comp_flags, ',\n')
		let s:python_func='def FlagsForFile(filename,**kwargs):\n\treturn { \"flags\": flags, \"do_cache\": True }'
		exe ':silent ! echo "import ycm_core\n\nflags = [\n'.s:python_flags.',\n]\n\n'.s:python_func.'\n" > .ycm_extra_conf.py'
		execute 'split .ycm_extra_conf.py'
	endfunction
	command! -nargs=? -complete=customlist,YcmConfigCompleter YcmConfig :call YcmConfig(<f-args>)
endif

"               _______________ _____________________
"______________/ Functionality / UltiSnips key fixes \__________"
if count(g:spf13_bundle_groups, 'youcompleteme')
	function! g:UltiSnips_Complete()
		call UltiSnips#ExpandSnippet()
		if g:ulti_expand_res == 0
			if pumvisible()
				return "\<C-n>"
			else
				call UltiSnips#JumpForwards()
				if g:ulti_jump_forwards_res == 0
				   return "\<C-J>"
				endif
			endif
		endif
		return ""
	endfunction

	au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
endif
